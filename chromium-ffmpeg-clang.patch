--- a/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
+++ b/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
@@ -425,7 +425,7 @@ def BuildFFmpeg(target_os, target_arch, host_os, host_arch, parallel_jobs,
         os.path.join('libavutil', GetDsoName(target_os, 'avutil', 56)),
     ]
     PrintAndCheckCall(
-        ['make', '-j%d' % parallel_jobs] + libraries, cwd=config_dir)
+        ['make', 'V=1', '-j%d' % parallel_jobs] + libraries, cwd=config_dir)
     for lib in libraries:
       shutil.copy(
           os.path.join(config_dir, lib), os.path.join(config_dir, 'out'))
@@ -782,9 +782,10 @@ def ConfigureAndBuild(target_arch, target_os, host_os, host_arch, parallel_jobs,
   if 'win' not in target_os:
     configure_flags['Common'].extend([
         '--enable-pic',
-        '--cc=clang',
-        '--cxx=clang++',
-        '--ld=clang',
+        '--cc=__CLANG_PATH__clang',
+        '--cxx=__CLANG_PATH__clang++',
+        '--ld=__CLANG_PATH__clang',
+        '--ar=__CLANG_PATH__llvm-ar',
     ])
 
     # Clang Linux will use the first 'ld' it finds on the path, which will
@@ -792,7 +792,7 @@ def ConfigureAndBuild(target_arch, target_os, host_os, host_arch, parallel_jobs,
     # ld.lld, to ensure that things like cross-compilation and LTO work.
     # This does not work for arm64, ia32 and is always used on mac.
     if target_arch not in ['arm64', 'ia32', 'mipsel'] and target_os != 'mac':
-      configure_flags['Common'].append('--extra-ldflags=-fuse-ld=lld')
+      configure_flags['Common'].append('--extra-ldflags=-fuse-ld=__CLANG_PATH____LLD__')

   # Should be run on Mac, unless we're cross-compiling on Linux.
   if target_os == 'mac':
